/*
 * generated by Xtext 2.38.0
 */
package uk.ac.kcl.topggdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.topggdsl.services.TopggDSLGrammarAccess;
import uk.ac.kcl.topggdsl.topggDSL.Bot;
import uk.ac.kcl.topggdsl.topggDSL.Model;
import uk.ac.kcl.topggdsl.topggDSL.Review;
import uk.ac.kcl.topggdsl.topggDSL.TopggDSLPackage;

@SuppressWarnings("all")
public class TopggDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TopggDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TopggDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TopggDSLPackage.BOT:
				sequence_Bot(context, (Bot) semanticObject); 
				return; 
			case TopggDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TopggDSLPackage.REVIEW:
				sequence_Review(context, (Review) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entry returns Bot
	 *     Bot returns Bot
	 *
	 * Constraint:
	 *     (name=STRING prefix=STRING tags+=STRING tags+=STRING* description=STRING)
	 * </pre>
	 */
	protected void sequence_Bot(ISerializationContext context, Bot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     entries+=Entry+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entry returns Review
	 *     Review returns Review
	 *
	 * Constraint:
	 *     (id=STRING botRef=[Bot|ID] status=Status reason=STRING reviewer=STRING)
	 * </pre>
	 */
	protected void sequence_Review(ISerializationContext context, Review semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TopggDSLPackage.Literals.REVIEW__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopggDSLPackage.Literals.REVIEW__ID));
			if (transientValues.isValueTransient(semanticObject, TopggDSLPackage.Literals.REVIEW__BOT_REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopggDSLPackage.Literals.REVIEW__BOT_REF));
			if (transientValues.isValueTransient(semanticObject, TopggDSLPackage.Literals.REVIEW__STATUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopggDSLPackage.Literals.REVIEW__STATUS));
			if (transientValues.isValueTransient(semanticObject, TopggDSLPackage.Literals.REVIEW__REASON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopggDSLPackage.Literals.REVIEW__REASON));
			if (transientValues.isValueTransient(semanticObject, TopggDSLPackage.Literals.REVIEW__REVIEWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TopggDSLPackage.Literals.REVIEW__REVIEWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReviewAccess().getIdSTRINGTerminalRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getReviewAccess().getBotRefBotIDTerminalRuleCall_3_0_1(), semanticObject.eGet(TopggDSLPackage.Literals.REVIEW__BOT_REF, false));
		feeder.accept(grammarAccess.getReviewAccess().getStatusStatusEnumRuleCall_5_0(), semanticObject.getStatus());
		feeder.accept(grammarAccess.getReviewAccess().getReasonSTRINGTerminalRuleCall_7_0(), semanticObject.getReason());
		feeder.accept(grammarAccess.getReviewAccess().getReviewerSTRINGTerminalRuleCall_9_0(), semanticObject.getReviewer());
		feeder.finish();
	}
	
	
}
