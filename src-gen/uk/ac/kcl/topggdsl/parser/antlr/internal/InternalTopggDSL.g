/*
 * generated by Xtext 2.38.0
 */
grammar InternalTopggDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.topggdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.topggdsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.topggdsl.services.TopggDSLGrammarAccess;

}

@parser::members {

 	private TopggDSLGrammarAccess grammarAccess;

    public InternalTopggDSLParser(TokenStream input, TopggDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TopggDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getEntriesEntryParserRuleCall_0());
			}
			lv_entries_0_0=ruleEntry
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"entries",
					lv_entries_0_0,
					"uk.ac.kcl.topggdsl.TopggDSL.Entry");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	iv_ruleEntry=ruleEntry
	{ $current=$iv_ruleEntry.current; }
	EOF;

// Rule Entry
ruleEntry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEntryAccess().getBotParserRuleCall_0());
		}
		this_Bot_0=ruleBot
		{
			$current = $this_Bot_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEntryAccess().getReviewParserRuleCall_1());
		}
		this_Review_1=ruleReview
		{
			$current = $this_Review_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBot
entryRuleBot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBotRule()); }
	iv_ruleBot=ruleBot
	{ $current=$iv_ruleBot.current; }
	EOF;

// Rule Bot
ruleBot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name'
		{
			newLeafNode(otherlv_0, grammarAccess.getBotAccess().getNameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBotAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='prefix'
		{
			newLeafNode(otherlv_2, grammarAccess.getBotAccess().getPrefixKeyword_2());
		}
		(
			(
				lv_prefix_3_0=RULE_STRING
				{
					newLeafNode(lv_prefix_3_0, grammarAccess.getBotAccess().getPrefixSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBotRule());
					}
					setWithLastConsumed(
						$current,
						"prefix",
						lv_prefix_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='tags'
		{
			newLeafNode(otherlv_4, grammarAccess.getBotAccess().getTagsKeyword_4());
		}
		(
			(
				lv_tags_5_0=RULE_STRING
				{
					newLeafNode(lv_tags_5_0, grammarAccess.getBotAccess().getTagsSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBotRule());
					}
					addWithLastConsumed(
						$current,
						"tags",
						lv_tags_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getBotAccess().getCommaKeyword_6_0());
			}
			(
				(
					lv_tags_7_0=RULE_STRING
					{
						newLeafNode(lv_tags_7_0, grammarAccess.getBotAccess().getTagsSTRINGTerminalRuleCall_6_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBotRule());
						}
						addWithLastConsumed(
							$current,
							"tags",
							lv_tags_7_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_8='description'
		{
			newLeafNode(otherlv_8, grammarAccess.getBotAccess().getDescriptionKeyword_7());
		}
		(
			(
				lv_description_9_0=RULE_STRING
				{
					newLeafNode(lv_description_9_0, grammarAccess.getBotAccess().getDescriptionSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBotRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_9_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleReview
entryRuleReview returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReviewRule()); }
	iv_ruleReview=ruleReview
	{ $current=$iv_ruleReview.current; }
	EOF;

// Rule Review
ruleReview returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='review'
		{
			newLeafNode(otherlv_0, grammarAccess.getReviewAccess().getReviewKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_STRING
				{
					newLeafNode(lv_id_1_0, grammarAccess.getReviewAccess().getIdSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviewRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='refersTo'
		{
			newLeafNode(otherlv_2, grammarAccess.getReviewAccess().getRefersToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviewRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getReviewAccess().getBotRefBotCrossReference_3_0());
				}
			)
		)
		otherlv_4='status'
		{
			newLeafNode(otherlv_4, grammarAccess.getReviewAccess().getStatusKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReviewAccess().getStatusStatusEnumRuleCall_5_0());
				}
				lv_status_5_0=ruleStatus
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReviewRule());
					}
					set(
						$current,
						"status",
						lv_status_5_0,
						"uk.ac.kcl.topggdsl.TopggDSL.Status");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='reason'
		{
			newLeafNode(otherlv_6, grammarAccess.getReviewAccess().getReasonKeyword_6());
		}
		(
			(
				lv_reason_7_0=RULE_STRING
				{
					newLeafNode(lv_reason_7_0, grammarAccess.getReviewAccess().getReasonSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviewRule());
					}
					setWithLastConsumed(
						$current,
						"reason",
						lv_reason_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8='reviewer'
		{
			newLeafNode(otherlv_8, grammarAccess.getReviewAccess().getReviewerKeyword_8());
		}
		(
			(
				lv_reviewer_9_0=RULE_STRING
				{
					newLeafNode(lv_reviewer_9_0, grammarAccess.getReviewAccess().getReviewerSTRINGTerminalRuleCall_9_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReviewRule());
					}
					setWithLastConsumed(
						$current,
						"reviewer",
						lv_reviewer_9_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Rule Status
ruleStatus returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='APPROVED'
			{
				$current = grammarAccess.getStatusAccess().getAPPROVEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStatusAccess().getAPPROVEDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='DECLINED'
			{
				$current = grammarAccess.getStatusAccess().getDECLINEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStatusAccess().getDECLINEDEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='REVIEW'
			{
				$current = grammarAccess.getStatusAccess().getREVIEWEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStatusAccess().getREVIEWEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
